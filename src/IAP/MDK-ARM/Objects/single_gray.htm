<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\single_gray.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\single_gray.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sun Jul 06 21:33:39 2025
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MAX_UART1_Init &rArr; HAL_UART_Init &rArr; UART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from interrupts_cw32l010.o(i.ADC_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[e]">ATIM_IRQHandler</a> from interrupts_cw32l010.o(i.ATIM_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[13]">BTIM1_IRQHandler</a> from interrupts_cw32l010.o(i.BTIM1_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[14]">BTIM2_IRQHandler</a> from interrupts_cw32l010.o(i.BTIM2_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[15]">BTIM3_IRQHandler</a> from interrupts_cw32l010.o(i.BTIM3_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[1a]">CLKFAULT_IRQHandler</a> from interrupts_cw32l010.o(i.CLKFAULT_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[9]">FLASHRAM_IRQHandler</a> from interrupts_cw32l010.o(i.FLASHRAM_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[b]">GPIOA_IRQHandler</a> from interrupts_cw32l010.o(i.GPIOA_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[c]">GPIOB_IRQHandler</a> from interrupts_cw32l010.o(i.GPIOB_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[11]">GTIM1_IRQHandler</a> from interrupts_cw32l010.o(i.GTIM1_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from interrupts_cw32l010.o(i.HardFault_Handler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[16]">I2C1_IRQHandler</a> from interrupts_cw32l010.o(i.I2C1_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[12]">LPTIM_IRQHandler</a> from interrupts_cw32l010.o(i.LPTIM_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from interrupts_cw32l010.o(i.LVD_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from interrupts_cw32l010.o(i.NMI_Handler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from interrupts_cw32l010.o(i.PendSV_Handler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from interrupts_cw32l010.o(i.RTC_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cw32l010.o(.text) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[17]">SPI1_IRQHandler</a> from interrupts_cw32l010.o(i.SPI1_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from interrupts_cw32l010.o(i.SVC_Handler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[a]">SYSCTRL_IRQHandler</a> from interrupts_cw32l010.o(i.SYSCTRL_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from cw32l010_systick.o(i.SysTick_Handler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[1c]">SystemInit</a> from system_cw32l010.o(i.SystemInit) referenced from startup_cw32l010.o(.text)
 <LI><a href="#[18]">UART1_IRQHandler</a> from interrupts_cw32l010.o(i.UART1_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[19]">UART2_IRQHandler</a> from interrupts_cw32l010.o(i.UART2_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[f]">VC1_IRQHandler</a> from interrupts_cw32l010.o(i.VC1_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[10]">VC2_IRQHandler</a> from interrupts_cw32l010.o(i.VC2_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from interrupts_cw32l010.o(i.WDT_IRQHandler) referenced from startup_cw32l010.o(RESET)
 <LI><a href="#[1d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cw32l010.o(.text)
 <LI><a href="#[1e]">fputc</a> from uart.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[1b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[37]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[80]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[81]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[82]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_cw32l010.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTick
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClkFreq
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_ldivmod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HSE_Enable
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[22]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[89]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[27]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[30]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2f]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[20]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ATIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.ATIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.BTIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.BTIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BTIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.BTIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CLKFAULT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.CLKFAULT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASHRAM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.FLASHRAM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FLASH_ErasePages</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, cw32l010_flash.o(i.FLASH_ErasePages))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_ErasePages
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[7a]"></a>FLASH_LockAllPages</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cw32l010_flash.o(i.FLASH_LockAllPages))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[78]"></a>FLASH_UnlockPages</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cw32l010_flash.o(i.FLASH_UnlockPages))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_UnlockPages
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[7b]"></a>FLASH_WriteBytes</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, cw32l010_flash.o(i.FLASH_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[b]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.GPIOB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIO_Init</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, cw32l010_gpio.o(i.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIME_GPIO_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MspInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[70]"></a>GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cw32l010_gpio.o(i.GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[63]"></a>GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cw32l010_gpio.o(i.GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MspInit
</UL>

<P><STRONG><a name="[11]"></a>GTIM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.GTIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GTIM_Cmd</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[3a]"></a>GTIM_OC1Cmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_OC1Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OC1Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[3b]"></a>GTIM_OC1ModeCfg</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_OC1ModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OC1ModeCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[3c]"></a>GTIM_OC2Cmd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_OC2Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OC2Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[3d]"></a>GTIM_OC2ModeCfg</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_OC2ModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OC2ModeCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[3e]"></a>GTIM_OC3Cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_OC3Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OC3Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[3f]"></a>GTIM_OC3ModeCfg</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_OC3ModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OC3ModeCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[40]"></a>GTIM_OC4Cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_OC4Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OC4Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[41]"></a>GTIM_OC4ModeCfg</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_OC4ModeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_OC4ModeCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[42]"></a>GTIM_SetCompare1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_SetCompare1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_SetCompare1
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_light_brightness
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[43]"></a>GTIM_SetCompare2</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_SetCompare2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_SetCompare2
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_light_brightness
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[44]"></a>GTIM_SetCompare3</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_SetCompare3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_SetCompare3
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_light_brightness
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[45]"></a>GTIM_SetCompare4</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_SetCompare4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_SetCompare4
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[46]"></a>GTIM_TimeBaseInit</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, cw32l010_gtim.o(i.GTIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GTIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[5b]"></a>GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32l010_systick.o(i.GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_bytes
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>InitTick</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cw32l010_systick.o(i.InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.LPTIM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>MAX_GTIME_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, time.o(i.MAX_GTIME_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MAX_GTIME_Init &rArr; HAL_TIME_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_TimeBaseInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare4
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare3
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare1
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC4ModeCfg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC4Cmd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC3ModeCfg
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC3Cmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC2ModeCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC2Cmd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC1ModeCfg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC1Cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_Cmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIME_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>MAX_UART1_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(i.MAX_UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MAX_UART1_Init &rArr; HAL_UART_Init &rArr; UART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>MX_GPIO_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SYSCTRL_AHBPeriphClk_Enable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cw32l010_sysctrl.o(i.SYSCTRL_AHBPeriphClk_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_AHBPeriphClk_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MspInit
</UL>

<P><STRONG><a name="[54]"></a>SYSCTRL_APBPeriphClk_Enable1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cw32l010_sysctrl.o(i.SYSCTRL_APBPeriphClk_Enable1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphClk_Enable1
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MspInit
</UL>

<P><STRONG><a name="[55]"></a>SYSCTRL_GetHClkFreq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cw32l010_sysctrl.o(i.SYSCTRL_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SYSCTRL_GetHClkFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SysClk_Switch
</UL>

<P><STRONG><a name="[56]"></a>SYSCTRL_HSE_Enable</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, cw32l010_sysctrl.o(i.SYSCTRL_HSE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SYSCTRL_HSE_Enable &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[57]"></a>SYSCTRL_HSI_Enable</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, cw32l010_sysctrl.o(i.SYSCTRL_HSI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_HSI_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a]"></a>SYSCTRL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.SYSCTRL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SYSCTRL_SysClk_Switch</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, cw32l010_sysctrl.o(i.SYSCTRL_SysClk_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_SysClk_Switch &rArr; SYSCTRL_GetHClkFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SystemCoreClockUpdate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[59]"></a>SYSCTRL_SystemCoreClockUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cw32l010_sysctrl.o(i.SYSCTRL_SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SysClk_Switch
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[5a]"></a>SysTickDelay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cw32l010_systick.o(i.SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_light_flash
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cw32l010_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cw32l010.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1c]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, system_cw32l010.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cw32l010_uart.o(i.UART_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_bytes
</UL>

<P><STRONG><a name="[5f]"></a>UART_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cw32l010_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_bytes
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[4b]"></a>UART_Init</STRONG> (Thumb, 748 bytes, Stack size 56 bytes, cw32l010_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[64]"></a>UART_ReceiveData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cw32l010_uart.o(i.UART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_bytes
</UL>

<P><STRONG><a name="[65]"></a>UART_SendData_8bit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cw32l010_uart.o(i.UART_SendData_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendData_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f]"></a>VC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.VC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>VC2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.VC2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupts_cw32l010.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cw32l010.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>__0printf$bare</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[75]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[36]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[90]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[91]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[39]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData_8bit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearFlag
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SysClk_Switch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HSI_Enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HSE_Enable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClk_Enable1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClk_Enable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_TimeBaseInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare4
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare3
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare1
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC4ModeCfg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC4Cmd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC3ModeCfg
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC3Cmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC2ModeCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC2Cmd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC1ModeCfg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_OC1Cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_Cmd
</UL>

<P><STRONG><a name="[1e]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; UART_SendData_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData_8bit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[6d]"></a>loop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, control.o(i.loop))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; MAX_UART1_Init &rArr; HAL_UART_Init &rArr; UART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_UART1_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6f]"></a>max</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mymath.o(i.max))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_light_brightness
</UL>

<P><STRONG><a name="[6e]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mymath.o(i.min))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_light_brightness
</UL>

<P><STRONG><a name="[69]"></a>set_light_brightness</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, light.o(i.set_light_brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_light_brightness &rArr; GTIM_SetCompare3
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare3
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GTIM_SetCompare1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_light_flash
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[6c]"></a>setup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, control.o(i.setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setup &rArr; uXMODEM_Process &rArr; get_data &rArr; uart_receive_bytes &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadPin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_light_flash
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>uXMODEM_Process</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, xmodem.o(i.uXMODEM_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uXMODEM_Process &rArr; get_data &rArr; uart_receive_bytes &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WriteBytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UnlockPages
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_LockAllPages
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePages
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_light_brightness
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uUART_PutChar
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCheckSum
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[6b]"></a>uart_receive_bytes</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, uart.o(i.uart_receive_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_receive_bytes &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearFlag
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
</UL>

<P><STRONG><a name="[74]"></a>uart_send_byte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, common.o(i.uart_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_send_byte &rArr; uart_send_bytes &rArr; UART_SendData_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uUART_PutChar
</UL>

<P><STRONG><a name="[7c]"></a>uart_send_bytes</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart.o(i.uart_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_send_bytes &rArr; UART_SendData_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData_8bit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cw32l010_systick.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTick
</UL>

<P><STRONG><a name="[5c]"></a>SystemClock_Config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SystemClock_Config &rArr; SYSCTRL_HSE_Enable &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTick
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SystemCoreClockUpdate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SysClk_Switch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HSI_Enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HSE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>HAL_UART_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_UART_Init &rArr; UART_Init &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_UART1_Init
</UL>

<P><STRONG><a name="[4a]"></a>UART_MspInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, uart.o(i.UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_MspInit &rArr; SYSCTRL_APBPeriphClk_Enable1
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WritePin
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClk_Enable1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClk_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[47]"></a>HAL_TIME_GPIO_Init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, time.o(i.HAL_TIME_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIME_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_GTIME_Init
</UL>

<P><STRONG><a name="[6a]"></a>get_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, xmodem.o(i.get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_data &rArr; uart_receive_bytes &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[76]"></a>uCheckSum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xmodem.o(i.uCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[73]"></a>uUART_PutChar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, xmodem.o(i.uUART_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uUART_PutChar &rArr; uart_send_byte &rArr; uart_send_bytes &rArr; UART_SendData_8bit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uXMODEM_Process
</UL>

<P><STRONG><a name="[68]"></a>enter_light_flash</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, control.o(i.enter_light_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enter_light_flash &rArr; set_light_brightness &rArr; GTIM_SetCompare3
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_light_brightness
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[72]"></a>jump</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, control.o(i.jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jump
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[67]"></a>_printf_core</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
